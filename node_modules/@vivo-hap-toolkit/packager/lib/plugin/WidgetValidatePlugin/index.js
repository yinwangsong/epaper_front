"use strict";const fs=require("fs"),path=require("path"),globalConfig=require("@vivo-hap-toolkit/shared-utils/config");function WidgetValidateError(e){this.name="WidgetValidateError",this.message=e||""}function getManifest(e){const t=path.resolve(e,globalConfig.sourceRoot,"manifest.json");return new Promise((e,r)=>{fs.readFile(t,(t,n)=>{if(t)r(t);else try{e(JSON.parse(n.toString()))}catch(e){r(e)}})})}WidgetValidateError.prototype=Error.prototype;const VENDOR_VIVO="vivo";function checkVendors(e){const t=[];return e.forEach(e=>{const r=e.targetManufactorys;r&&Array.isArray(r)?-1===r.indexOf(VENDOR_VIVO)&&t.push(`卡片 <${e.name}> 的 targetManufactorys 字段（${JSON.stringify(r)}）需包含 ${VENDOR_VIVO}`):t.push(`卡片 <${e.name}> 的 targetManufactorys 字段不存在或为非数组！`)}),t.join("\n")}const MIN_PLATFORM_VERSION=1032;function checkVersion(e){const t=[];return e.forEach(e=>{const r=e.minPlatformVersion;r&&"number"==typeof r?Number(r)<MIN_PLATFORM_VERSION&&t.push(`卡片 <${e.name}> 的 minPlatformVersion 版本必须大于或等于 ${MIN_PLATFORM_VERSION}！`):t.push(`卡片 <${e.name}> 的 minPlatformVersion 字段不存在或非数字！`)}),t.join("\n")}function checking(e){return getManifest(e).then(e=>{const t=Object.values(e.router.widgets||{}),r=[checkVersion(t),checkVendors(t)];return Promise.all(r)}).then(t=>{const r=t.filter(Boolean).join("\n").trim();if(r)throw new WidgetValidateError(`当前目录 ${e} \n${r}`)})}function WidgetCheckPlugin({cwd:e}){this.cwd=e||process.cwd()}WidgetCheckPlugin.prototype.apply=function(e){e.hooks.afterEmit.tapPromise("WidgetCheckPlugin",(e,t)=>checking(this.cwd).then(t,t=>{const r="WidgetValidateError"===t.name?new Error(`卡片检查发现错误：\n${t.message}\n`):t;e.errors.push(r)}))},module.exports=WidgetCheckPlugin;
//# sourceMappingURL=index.js.map
