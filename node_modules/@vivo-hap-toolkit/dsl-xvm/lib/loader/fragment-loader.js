"use strict";var _fs=_interopRequireDefault(require("fs")),_loaderUtils=_interopRequireDefault(require("loader-utils")),_compiler=require("@vivo-hap-toolkit/compiler"),_utils=require("./common/utils");function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}module.exports=function(e,t){this.cacheable&&this.cacheable();const n=this.async(),s=_loaderUtils.default.parseQuery(this.query),i=_loaderUtils.default.parseQuery(this.resourceQuery)||{},o=s.type,l=i.uxType,a=this.resourcePath;let r=s.index;null!=r&&r.match(/^\d+$/)&&(r=parseInt(r)),Promise.resolve((0,_compiler.parseFragmentsWithCache)(e,a)[o]).then(n=>{null!=r&&(n=n[r]);let s,i=n.content.trim();if(o===_utils.FRAG_TYPE.SCRIPT&&(0,_utils.isUXEntry)(l)&&"Y"===process.env.NODE_TEST)if(a.match(/src[\\\/]app\./))i=`import '@vivo-hap-toolkit/packager/lib/common/app.js'\n ${i}`;else{const e=a.replace("/src/","/test/").replace(/\.\w{2,5}$/,".js");if(_fs.default.existsSync(e)){const t=e.match(/[\\\/]test[\\\/](.*)/)[1];i=(i=`\nimport fnTestCase from '${e}'\n${i}`).replace("export default {","export default {\n    onCreate () {\n      // 允许back被外部覆盖\n      if (this._options._descriptor) {\n        this._options._descriptor['back'] = {access: 'public'}\n      }\n\n      // 测试执行：开始时间，结束事件\n      global.CASE_TEST_START = global.CASE_TEST_START || 1000\n      global.CASE_TEST_TIMEOUT = global.CASE_TEST_TIMEOUT || 2000\n\n      global.mocha = new Mocha({ reporter: 'json', timeout: global.CASE_TEST_TIMEOUT })\n      mocha.ui('bdd')\n      mocha.suite.emit('pre-require', global, null, mocha);\n      setTimeout(function() {\n        // 记录测试用例\n        typeof fnTestCase === 'function' && fnTestCase(this)\n        var mochaRunner = mocha.run(function () {\n          if (mochaRunner) {\n            // 标题\n            mochaRunner.testResults.stats.title = mocha.suite.suites && mocha.suite.suites[0] && mocha.suite.suites[0].title\n            console.info('testResults: ', JSON.stringify(mochaRunner.testResults))\n            pushData('pageTestList', mochaRunner.testResults)\n\n            // 显示结果\n            const stats = mochaRunner.testResults.stats\n            this.$page.setTitleBar({ text: `通过/全部: ${stats.passes}/${stats.tests}` })\n          }\n\n          // 是否返回\n          if (this.back !== 'false') {\n            console.info('拥有关联测试用例，测试完毕，返回到之前的页面')\n            history.back()\n          }\n        }.bind(this))\n      }.bind(this), global.CASE_TEST_START)\n    },"),_utils.colorconsole.info(`[INFO] 脚本注入测试用例：${t}`)}else i=i.replace("export default {","export default {\n    onCreate () {\n      // 允许back被外部覆盖\n      if (this._options._descriptor) {\n        this._options._descriptor['back'] = {access: 'public'}\n      }\n\n      // 测试执行：开始时间，结束事件\n      global.CASE_TEST_START = global.CASE_TEST_START || 1000\n      global.CASE_TEST_TIMEOUT = global.CASE_TEST_TIMEOUT || 2000\n\n      setTimeout(function() {\n        // 是否返回\n        if (this.back !== 'false') {\n          console.info('没有关联测试用例，直接返回到之前的页面')\n          history.back()\n        }\n      }.bind(this), global.CASE_TEST_START)\n    },")}if(this.sourceMap&&(o===_utils.FRAG_TYPE.SCRIPT||o===_utils.FRAG_TYPE.IMPORT)){const o=n.location.line;let l;t&&(l=(0,_utils.consumeMap)(this,e,t),e=l.sourcesContent.join(""));const a=(0,_utils.splitSourceLine)(i).map((e,t)=>{let n=(t+=1)+o;const s=t;return l&&(n=l.mapping[`line-${n}-column-0`].line),{original:{line:n,column:0},generated:{line:s,column:0}}});s=(0,_utils.generateMap)(this,e,a)}return[i,s]}).then(([e,s])=>{n(null,e,s&&s.toJSON()||t)}).catch(e=>{n(e,"")})};
//# sourceMappingURL=fragment-loader.js.map
