<template>
  <div class="quist-input" style="{{wrapper()}}">
      <input class="quist-input__fix" />
      <div class="{{disabled ? 'quist-input--disabled' : ''}}">
        <div class="quist-input__img" style="{{icon()}}" if="prefixIcon">
          <image src="{{prefixIcon}}" class="quist-input__icon" />
        </div>
        <input id="search-input" class="quist-input__box" type="{{type}}" value='{{searchValue}}' placeholder="{{placeholder}}" maxlength="{{maxlength}}" disabled="{{disabled}}" @change="onChange" @blur="{{onBlur}}" style="{{input()}}" />
        <div class="quist-input__img" @click="clearClick" style="{{icon()}}" if="{{showSuffix}}">
          <image src="{{suffixIcon}}" class="quist-input__icon" />
        </div>
      </div>
    </div>
  </div>
</template>

<style lang="less">
  @import "../../style/index.less";
  @import "../../style/components/quist-input/index.less";
</style>

<script>
  const DEFAULT_COUNT = 9999999999999999;
  export default {
    props: {
      type: {
        type: String, // text | number | password | phone(电话号码) | bankCard(银行卡号) | amount(金额) |
        default: 'text'
      },
      placeholder: {
        type: String,
        default: ''
      },
      disabled: {
        type: Boolean,
        default: false
      },
      prefix: {
        type: String,
        default: ''
      },
      suffix: {
        type: String,
        default: ''
      },
      value: {
        type: String,
        default: null
      },
      wrapperStyle: {
        type: Object,
        default: {}
      },
      iconStyle: {
        type: Object,
        default: {}
      },
      inputStyle: {
        type: Object,
        default: {}
      },
      autofocus: {
        type: Boolean,
        default: false
      }
    },
    data() {
      return {
        searchValue: '',
        showSuffix: false,
        replaceShow: true,
        maxlength: 9999999
      }
    },
    onInit() {
      this.init()
      this.$watch('value', 'change')
    },
    onReady() {
      this.statusChange()
      this.$watch('autofocus', 'statusChange')
    },
    init() {
      let obj = {
        'amount': DEFAULT_COUNT,
        'bankCard': DEFAULT_COUNT,
        'phone': 13
      }
      this.prefixIcon = this.prefix;
      this.suffixIcon = this.suffix;
      this.searchValue = this.value;
      this.maxlength = obj[this.type];
      this.formatMethod(this.searchValue, this.type);
    },
    change() {
      this.searchValue = this.value
    },
    statusChange() {
      let input = this.$element("search-input");
      input.focus({
        focus: !!this.autofocus
      });
    },
    onChange(e) {
      let value = e.value
      this.searchValue = value
      this.showSuffix = !!value
      if (this.type !== 'amount') {
        value = this.formatMethod(value, this.type)
      }
      this.$emit('onChange', { value });
    },
    onBlur(e) {
      let value = this.formatMethod(this.searchValue, this.type)
      this.$emit('onChange', { value })
    },
    formatMethod(value, type) { 
      if (value && type) {
        let obj = {
          'amount': this.amountFormat(value),
          'bankCard': this.bankCardFormat(value),
          'phone': this.phoneFormat(value)
        }
        value = obj[type] || value;
      }
      return value;
    },
    // 格式化银行卡号
    bankCardFormat(value) {
      if(/\S{5}/.test(value)){
        value = value.replace(/\s/g, '').replace(/(.{4})/g, "$1 ");
      }
      return value;
    },
    // 格式化金额
    amountFormat(value) {
      if(value == "" || isNaN(value)){
          return "";
        }
        let s = value;
        if(/.+(\..*\.|\-).*/.test(s)){
          return;
        }
        s = parseFloat((s + "").replace(/[^\d\.\-]/g, "")).toFixed(2) + "";
        let l = s.split(".")[0].split("").reverse();
        let r = s.split(".")[1];
        let t = "";
        for(let i = 0; i < l.length; i ++ ) {
          t += l[i] + ((i + 1) % 3 == 0 && (i + 1) != l.length && (l[i+1]!='-')? "," : "");
        }
        return t.split("").reverse().join("") + "." + r;
    },
    phoneFormat(value) {
      let str = value.toString().replace(/ /g, '');
      let len = str.length;
      switch (true) {
        case len > 11:
          str = str.substr(0, 3) + ' ' + str.substr(3, 4) + ' ' + str.substr(7, 4);
          break;
        case len > 7:
          str = str.substr(0, 3) + ' ' + str.substr(3, 4) + ' ' + str.substr(7);
          break;
        case len > 3:
          str = str.substr(0, 3) + ' ' + str.substr(3);
          break;
        default:
      }
      return str;
    },
    clearClick() {
      this.showSuffix = false
      this.$emit('onChange', { value: '' })
    },
    wrapper() {
      let baseStyle = {
      }
      return Object.assign(baseStyle, this.wrapperStyle)
    },
    icon() {
      let baseStyle = {
      }
      return Object.assign(baseStyle, this.iconStyle)
    },
    input() {
      let baseStyle = {
      }
      return Object.assign(baseStyle, this.inputStyle)
    }
  }
</script>