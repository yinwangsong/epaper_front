<template>
  <div class="quist-checkbox">
    <block for="(index, row) in options">
      <div if="!(index === 0)" class="quist-checkbox-top"></div>
      <div class="quist-checkbox__item {{isRight ? 'quist-checkbox__item--isRight' : ''}}" @click="click(row)">
        <text class="quist-checkbox__name {{row.disabled ? 'quist-checkbox__item--disabled' : ''}}" if="isRight" style="{{label()}}">{{row.label || row}}</text>
        <stack class="quist-checkbox__checkbox" style="{{wrapper(replaceChecked[index] ? checkedColor : checkColor, replaceChecked[index] ? checkedBorderColor : checkBorderColor)}}">
          <div class="quist-checkbox__thumb {{replaceChecked[index] ? 'quist-checkbox__thumb--open' : 'quist-checkbox__thumb--close'}} {{row.disabled ? 'quist-checkbox__item--disabled' : ''}}" style="{{inner()}}"></div>
        </stack>
        <text class="quist-checkbox__name {{row.disabled ? 'quist-checkbox__item--disabled' : ''}}" if="!isRight" style="{{label()}}">{{row.label || row}}</text>
      </div>
    </block>
  </div>
</template>

<style lang="less">
@import "../../style/index.less";
@import "../../style/components/quist-checkbox/index.less";
</style>

<script>
  export default {
    props: {
      values: {
        type: Array,
        default: []
      },
      options: {
        type: Array,
        default: []
      },
      labelColor: {
        type: String,
        default: '#000000'
      },
      checkColor: {
        type: String,
        default: '#FFFFFF'
      },
      checkedColor: {
        type: String,
        default: '#2998F9'
      },
      checkBorderColor: {
        type: String,
        default: '#CACBCC'
      },
      checkedBorderColor: {
        type: String,
        default: '#2998F9'
      },
      isRight: {
        type: Boolean,
        default: false
      },
      labelStyle: {
        type: Object,
        default: {}
      },
      wrapperStyle: {
        type: Object,
        default: {}
      },
      innerStyle: {
        type: Object,
        default: {}
      }
    },
    data() {
      return {
        replaceChecked: [],
        replaceValues: this.values
      }
    },
    onInit() {
      this.init()
      this.updateChecked()
      this.$on('evtCast', this.updateArr)
    },
    onReady() {
      this.$watch('values', 'init')
      this.$watch('replaceValues', 'change')
      this.$watch('replaceValues', 'updateChecked')
    },
    init() {
      this.replaceValues = [...this.values]
    },
    click(data) {
      if (typeof data === 'object') {
        if (!data.disabled) {
          this.updateArr(data.value)
        }
      }
      else {
        this.updateArr(data)
      }
    },
    updateChecked() {
      for (let i = 0, length = this.options.length; i < length; i++) {
        this.replaceChecked.splice(i, 1, false)
        for (let j = 0, len = this.replaceValues.length; j < len; j++) {
          let val = this.options[i].value || this.options[i]
          if (len > 0 && val === this.replaceValues[j]) {
            this.replaceChecked.splice(i, 1, true)
            break
          }
        }
      }
    },
    updateArr(params) {
      let data = (typeof params === 'object' ? params.detail.params : params)
      if (this.checkInArr(this.replaceValues, data)) {
        this.replaceValues.forEach((val, idx) => {
          if (val === data) {
            this.replaceValues.splice(idx, 1)
          }
        })
      }
      else {
        this.replaceValues.push(data)
      }

    },
    checkInArr(arr, data) {
      let isExist = false
      for (let i = 0, len = arr.length; i < len; i++) {
        if (arr[i] === data) {
          isExist = true
        }
      }
      return isExist
    },
    change() {
      this.$emit('onChange', { values: this.replaceValues })
    },
    label() {
      let baseStyle = {
        color: this.labelColor
      }
      return Object.assign(baseStyle, this.labelStyle)
    },
    wrapper(backgroundColor, borderColor) {
      let baseStyle = {
        backgroundColor,
        borderColor
      }
      return Object.assign(baseStyle, this.wrapperStyle)
    },
    inner() {
      let baseStyle = {

      }
      return Object.assign(baseStyle, this.innerStyle)
    }
  }
</script>