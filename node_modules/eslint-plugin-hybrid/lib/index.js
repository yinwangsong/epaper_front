/**
 * @fileoverview Eslint plugin for Hybrid APP
 * @author hybrid
 */
'use strict';

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

var requireIndex = require('requireindex');
var htmlparser = require('htmlparser2')

//------------------------------------------------------------------------------
// Plugin Definition
//------------------------------------------------------------------------------


// import all rules in lib/rules
// module.exports.rules = requireIndex(__dirname + '/rules');
function getEmbeddedJavascript(html) {
  let embeddedJS = [];
  let index = 0;
  let inscript = false;
  let parser = new htmlparser.Parser({
    onopentag: (name, attribs) => {
      if (name === "script") {
        // Push new lines for lines between previous script tag and this one to preserve location information
        embeddedJS.push.apply(embeddedJS, html.slice(index, parser.endIndex).match(/\n\r|\n|\r/g));
        inscript = true;
      }
    },
    ontext(data) {
      if (!inscript) {
        return;
      }

      // Collect JavaScript code
      embeddedJS.push(data);
    },
    onclosetag: (name) => {
      if (name !== "script" || !inscript) {
        return;
      }

      index = parser.startIndex;
      inscript = false;
    }
  });

  parser.write(html);
  parser.end();

  return embeddedJS.join("");
}

const processorDef = {
  preprocess: function (text, filename) {
    text = text || ''

    //var match = text.match(/<script>((.|\n)*)<\/script>/m)

    var match = getEmbeddedJavascript(text)

    if (match) {
      return [match]
    }
    return [''];
  },

  postprocess: function (messages, filename) {
    if (messages.length > 0) {
      return messages[0]
    }
    return [];
  }
}


// import processors
module.exports.processors = {
  '.mix': processorDef,
  '.ux': processorDef
};